package cn.xxblog.leetcode;

import java.util.HashMap;
import java.util.HashSet;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * https://leetcode.cn/problems/check-if-there-is-a-valid-parentheses-string-path/
 */
public class CheckIfThereIsAValidParenthesesStringPath {
    static boolean flag;
    HashMap<String, Integer> set = new HashMap<>();

    public boolean hasValidPath(char[][] grid) {
        flag = false;
        set.clear();
        if ((grid.length + grid[0].length) % 2 == 0) {
            return false;
        }
        dfs(grid, 0, 0, 0);
        return flag;
    }


    private void dfs(char[][] grid, int i, int j, int tmp) {

        var str = i + "," + j + "," + tmp;
        if (set.containsKey(str) && set.get(str) == tmp) {
            return;
        }
        set.put(str, tmp);
        if (i >= grid.length || j >= grid[0].length) {
            return;
        }
        tmp = tmp + ('(' == grid[i][j] ? 1 : -1);
        if (tmp < 0 || tmp > (grid.length + grid[0].length) / 2) {
            return;
        }
        if (i + 1 == grid.length && j + 1 == grid[0].length && tmp == 0) {
            flag = true;
            return;
        }
        if (!flag && i + 1 < grid.length) dfs(grid, i + 1, j, tmp);
        if (!flag && j + 1 < grid[0].length) dfs(grid, i, j + 1, tmp);
    }


    public static void main(String[] args) {
        CheckIfThereIsAValidParenthesesStringPath path = new CheckIfThereIsAValidParenthesesStringPath();
        var grid = new char[][]{{'(', '(', '('}, {')', '(', ')'}, {'(', '(', ')'}, {'(', '(', ')'}};

        var grid1 = new char[][]{{'(', '(', ')', ')', ')', '(', '(', ')', '(', ')', ')', '(', '(', '(', '(', '(', '(', ')', ')', ')', ')', ')', '(', '(', ')', ')', ')', '(', '(', ')', '(', ')', ')', '(', '(', '(', '(', '(', '(', ')'}, {')', ')', ')', '(', '(', ')', ')', ')', '(', ')', '(', ')', ')', '(', ')', '(', ')', '(', ')', ')', '(', '(', '(', ')', ')', ')', '(', '(', '(', '(', ')', '(', ')', '(', '(', ')', ')', '(', '(', ')'}, {')', '(', ')', ')', ')', ')', ')', ')', '(', '(', ')', ')', '(', '(', ')', ')', ')', '(', '(', ')', '(', ')', ')', '(', ')', '(', ')', ')', '(', '(', '(', ')', '(', ')', ')', ')', '(', ')', '(', '('}, {'(', '(', '(', ')', '(', ')', ')', '(', '(', '(', '(', ')', '(', '(', ')', ')', '(', '(', ')', '(', '(', '(', '(', ')', '(', '(', '(', '(', ')', ')', ')', '(', '(', ')', '(', '(', '(', '(', ')', ')'}, {'(', '(', ')', ')', ')', ')', ')', '(', ')', '(', '(', ')', ')', ')', '(', '(', ')', '(', '(', '(', '(', '(', '(', ')', ')', '(', ')', ')', ')', ')', '(', '(', ')', '(', '(', '(', ')', '(', ')', '('}, {'(', '(', ')', '(', ')', '(', ')', ')', '(', '(', ')', '(', '(', ')', '(', '(', ')', '(', '(', ')', ')', '(', ')', '(', ')', ')', ')', ')', '(', '(', '(', '(', '(', ')', '(', '(', ')', '(', '(', '('}, {'(', '(', ')', ')', ')', '(', ')', '(', '(', ')', ')', ')', '(', '(', '(', '(', '(', ')', '(', ')', '(', '(', ')', '(', ')', '(', ')', '(', '(', ')', ')', '(', '(', '(', ')', '(', '(', '(', '(', ')'}, {'(', '(', ')', '(', ')', ')', ')', '(', '(', '(', ')', '(', '(', '(', '(', ')', ')', ')', '(', '(', ')', '(', ')', ')', ')', ')', ')', ')', ')', ')', '(', ')', ')', ')', ')', '(', ')', '(', ')', '('}, {'(', ')', '(', '(', ')', '(', ')', ')', ')', '(', ')', '(', '(', '(', '(', '(', '(', ')', '(', '(', '(', '(', ')', ')', ')', ')', ')', ')', '(', '(', '(', ')', ')', '(', '(', ')', ')', ')', '(', '('}, {')', ')', '(', '(', '(', ')', '(', ')', ')', ')', ')', '(', ')', ')', ')', ')', '(', '(', '(', '(', '(', ')', ')', '(', '(', '(', ')', '(', '(', ')', ')', '(', ')', '(', '(', ')', '(', ')', '(', ')'}, {'(', '(', ')', '(', '(', '(', ')', '(', ')', ')', ')', ')', ')', '(', ')', '(', ')', '(', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', '(', '(', '(', '(', '(', '(', ')', '('}, {')', '(', ')', '(', ')', '(', '(', ')', ')', ')', ')', ')', '(', '(', ')', ')', ')', '(', ')', ')', '(', '(', ')', ')', '(', '(', ')', ')', ')', ')', '(', ')', '(', ')', '(', '(', ')', ')', ')', '('}, {'(', ')', ')', ')', '(', '(', ')', '(', ')', ')', '(', '(', '(', '(', '(', ')', '(', ')', ')', '(', '(', '(', '(', '(', '(', '(', ')', '(', ')', ')', '(', ')', ')', '(', '(', '(', ')', '(', '(', ')'}, {'(', ')', ')', '(', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', '(', '(', '(', ')', ')', ')', '(', ')', '(', ')', '(', '(', ')', ')', '(', '(', '(', ')', ')', ')', ')', '(', ')', ')'}, {')', '(', ')', ')', '(', ')', ')', ')', '(', ')', '(', '(', ')', '(', '(', '(', ')', ')', ')', ')', '(', '(', ')', ')', ')', '(', '(', '(', '(', '(', '(', '(', ')', ')', '(', ')', '(', '(', ')', '('}, {'(', '(', ')', ')', '(', '(', ')', ')', ')', '(', ')', ')', '(', '(', '(', '(', ')', ')', ')', '(', ')', ')', ')', '(', ')', ')', ')', ')', '(', '(', ')', '(', ')', ')', '(', ')', '(', ')', ')', '('}, {'(', ')', ')', '(', '(', ')', ')', ')', ')', ')', '(', ')', '(', '(', ')', '(', ')', ')', '(', ')', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', '(', '(', ')', ')', '(', '(', '(', ')', ')', ')'}, {')', ')', '(', '(', ')', ')', ')', '(', ')', ')', '(', '(', ')', '(', ')', '(', ')', '(', '(', ')', '(', ')', ')', ')', '(', ')', ')', ')', '(', '(', ')', ')', '(', ')', '(', '(', '(', ')', ')', '('}, {')', '(', '(', '(', '(', ')', ')', '(', '(', '(', '(', '(', ')', ')', '(', ')', '(', ')', ')', ')', ')', ')', '(', ')', '(', ')', '(', '(', '(', ')', ')', ')', ')', ')', '(', ')', '(', ')', ')', ')'}, {'(', ')', ')', ')', '(', '(', ')', ')', '(', '(', ')', ')', '(', '(', '(', '(', ')', '(', ')', ')', ')', ')', '(', ')', ')', '(', '(', '(', ')', ')', ')', '(', ')', '(', ')', ')', ')', ')', ')', '('}, {'(', '(', '(', ')', ')', ')', '(', ')', ')', ')', '(', '(', '(', '(', ')', '(', ')', '(', '(', ')', ')', '(', ')', ')', ')', ')', ')', '(', '(', ')', '(', '(', ')', ')', ')', ')', ')', ')', ')', '('}, {')', '(', ')', '(', ')', ')', ')', ')', '(', '(', '(', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', '(', '(', '(', '(', '(', '(', ')', '(', '(', '(', ')', ')', ')', '(', '('}, {')', '(', '(', '(', ')', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', ')', '(', '(', '(', ')', '(', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', '(', '(', ')', '(', '(', '(', '(', ')'}, {'(', '(', '(', ')', '(', '(', ')', ')', '(', ')', '(', ')', ')', '(', ')', ')', ')', '(', '(', '(', ')', '(', ')', ')', ')', ')', ')', '(', '(', ')', '(', '(', ')', ')', ')', '(', '(', '(', ')', ')'}, {')', '(', '(', ')', '(', '(', ')', ')', ')', ')', ')', '(', '(', ')', '(', '(', '(', ')', ')', '(', ')', '(', '(', '(', ')', ')', '(', '(', '(', '(', ')', ')', '(', '(', ')', ')', ')', '(', ')', ')'}, {'(', '(', ')', ')', '(', '(', ')', ')', '(', '(', ')', '(', '(', '(', ')', ')', ')', '(', '(', '(', ')', '(', ')', ')', ')', ')', '(', '(', '(', '(', '(', ')', '(', ')', ')', '(', '(', '(', ')', '('}, {')', ')', ')', ')', '(', ')', ')', ')', ')', '(', '(', ')', '(', '(', '(', ')', ')', ')', '(', '(', '(', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', '(', ')', ')', ')', ')', ')', ')', '(', ')'}, {'(', '(', ')', '(', '(', '(', '(', '(', '(', ')', ')', ')', ')', '(', ')', '(', '(', '(', '(', '(', '(', ')', ')', ')', ')', '(', '(', ')', ')', ')', '(', ')', ')', '(', '(', ')', ')', '(', '(', '('}, {')', '(', ')', '(', ')', '(', ')', '(', '(', '(', '(', ')', ')', '(', ')', ')', ')', ')', ')', ')', '(', '(', '(', '(', '(', ')', ')', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')', ')'}, {'(', '(', ')', '(', ')', ')', ')', ')', '(', ')', ')', ')', ')', '(', ')', ')', '(', ')', ')', '(', '(', ')', ')', ')', ')', '(', '(', '(', '(', '(', '(', '(', ')', ')', '(', ')', '(', '(', ')', '('}, {'(', ')', '(', '(', '(', '(', '(', '(', '(', ')', '(', '(', '(', '(', '(', ')', ')', ')', '(', '(', ')', '(', ')', ')', '(', '(', '(', ')', '(', '(', ')', '(', '(', '(', ')', '(', ')', '(', ')', ')'}};
//        for (int i = 0; i < grid1.length; i++) {
//            for (int j = 0; j < grid1[0].length; j++) {
//                System.out.printf("%c\t", grid1[i][j]);
//            }
//            System.out.println();
//        }
        //        System.out.println(path.hasValidPath(grid1));
//        for (int i = 0; i < 10; i++) {
        boolean b = path.hasValidPath(grid1);
        System.out.println(b);
//        }


    }

}
